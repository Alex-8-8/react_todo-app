{"version":3,"sources":["components/TodoApp/TodoApp.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","App.js","index.js"],"names":["TodoApp","state","title","handleChange","event","setState","target","value","handleSubmit","preventDefault","length","newTask","id","uuid","completed","props","addNewTodo","this","onSubmit","type","className","placeholder","onChange","React","Component","TodoItem","todo","onDeleteTodo","onUpdateCompleted","cn","checked","htmlFor","onClick","TodoList","todos","onToggleCompleted","map","key","App","filter","prevState","deleteTodo","handleCompleted","toggleAllCompleted","deleteCompleted","filterTodos","cachedTodos","localStorage","getItem","JSON","parse","prevProps","stringify","setItem","filteredTodos","handleFilters","uncompletedTodo","selected","ReactDOM","render","document","getElementById"],"mappings":"iVAIaA,EAAb,2MACEC,MAAQ,CACNC,MAAO,IAFX,EAKEC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZH,MAAOE,EAAME,OAAOC,SAP1B,EAWEC,aAAe,SAACJ,GACdA,EAAMK,iBADkB,IAEhBP,EAAU,EAAKD,MAAfC,MAER,GAAIA,EAAMQ,OAAS,EAAG,CACpB,IAAMC,EAAU,CACdT,QACAU,GAAIC,MACJC,WAAW,GAGb,EAAKC,MAAMC,WAAWL,GAEtB,EAAKN,SAAS,CACZH,MAAO,OAzBf,wEA8BY,IACAA,EAAUe,KAAKhB,MAAfC,MAER,OACE,0BAAMgB,SAAUD,KAAKT,cACnB,2BACEW,KAAK,OACLC,UAAU,WACVC,YAAY,yBACZd,MAAOL,EACPoB,SAAUL,KAAKd,oBAxCzB,GAA6BoB,IAAMC,WCAtBC,EAAW,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,aAAcC,EAAwB,EAAxBA,kBAE3C1B,EAGEwB,EAHFxB,MACAU,EAEEc,EAFFd,GACAE,EACEY,EADFZ,UAGF,OACE,wBAAIM,UAAWS,IAAG,CAAEf,eAClB,yBAAKM,UAAU,QACb,2BACED,KAAK,WACLC,UAAU,SACVR,GAAIA,EACJU,SAAUM,EACVE,QAAShB,IAEX,2BAAOiB,QAASnB,GAAKV,GACrB,4BACEiB,KAAK,SACLC,UAAU,UACVY,QAASL,KAGb,2BAAOR,KAAK,OAAOC,UAAU,WCxBtBa,EAAW,SAAClB,GAAW,IAEhCmB,EAIEnB,EAJFmB,MACAP,EAGEZ,EAHFY,aACAC,EAEEb,EAFFa,kBACAO,EACEpB,EADFoB,kBAGF,OACE,6BACE,2BACEhB,KAAK,WACLP,GAAG,aACHQ,UAAU,aACVY,QAASG,IAEX,2BAAOJ,QAAQ,cAAf,wBACCG,EAAMxB,OAAS,GACd,wBAAIU,UAAU,aACXc,EAAME,KAAI,SAAAV,GAAI,OACb,kBAAC,EAAD,CACEW,IAAKX,EAAKd,GACVc,KAAMA,EACNC,aAAc,kBAAMA,EAAaD,EAAKd,KACtCgB,kBAAmB,kBAAMA,EAAkBF,EAAKd,aCbjD0B,EAAb,2MACErC,MAAQ,CACNiC,MAAO,GACPK,OAAQ,OAHZ,EAsBEvB,WAAa,SAACU,GACZ,EAAKrB,UAAS,SAAAmC,GAAS,MAAK,CAC1BN,MAAM,GAAD,mBACAM,EAAUN,OADV,CAEHR,SA1BR,EA+BEe,WAAa,SAAC7B,GACZ,EAAKP,UAAS,SAAAmC,GAAS,MAAK,CAC1BN,MAAOM,EAAUN,MAAMK,QAAO,SAAAb,GAAI,OAAIA,EAAKd,KAAOA,UAjCxD,EAqCE8B,gBAAkB,SAAC9B,GACjB,EAAKP,UAAS,SAAAmC,GAAS,MAAK,CAC1BN,MAAOM,EAAUN,MAAME,KAAI,SAAAV,GAAI,OAC5BA,EAAKd,KAAOA,EAAb,eAEOc,EAFP,CAGIZ,WAAYY,EAAKZ,YAEjBY,UA7CZ,EAkDEiB,mBAAqB,SAACvC,GAAW,IACvB0B,EAAY1B,EAAME,OAAlBwB,QAER,EAAKzB,UAAS,SAAAmC,GAAS,MAAK,CAC1BN,MAAOM,EAAUN,MAAME,KAAI,SAAAV,GAAI,sBAC1BA,EAD0B,CAE7BZ,UAAWgB,YAxDnB,EA6DEc,gBAAkB,WAChB,EAAKvC,UAAS,SAAAmC,GAAS,MAAK,CAC1BN,MAAOM,EAAUN,MAAMK,QAAO,SAAAb,GAAI,OAAKA,EAAKZ,kBA/DlD,EAmEE+B,YAAc,SAACzC,GAAW,IAChBG,EAAUH,EAAME,OAAhBC,MAER,EAAKF,SAAS,CACZkC,OAAQhC,KAvEd,mFAOI,IAAMuC,EAAcC,aAAaC,QAAQ,SAEzC,GAAIF,EAAa,CACf,IAAMZ,EAAQe,KAAKC,MAAMJ,GAEzB7B,KAAKZ,SAAS,CAAE6B,aAZtB,yCAgBqBiB,EAAWX,GACxBS,KAAKG,UAAUZ,EAAUN,SAAWe,KAAKG,UAAUnC,KAAKhB,QAC1D8C,aAAaM,QAAQ,QAASJ,KAAKG,UAAUnC,KAAKhB,MAAMiC,UAlB9D,+BA2EY,IAAD,EACmBjB,KAAKhB,MAAvBiC,EADD,EACCA,MAAOK,EADR,EACQA,OACTe,EAvFY,SAACpB,EAAOK,GAC5B,OAAQA,GACN,IAAK,SACH,OAAOL,EAAMK,QAAO,SAAAb,GAAI,OAAKA,EAAKZ,aACpC,IAAK,YACH,OAAOoB,EAAMK,QAAO,SAAAb,GAAI,OAAIA,EAAKZ,aACnC,QAAS,OAAOoB,GAiFMqB,CAAcrB,EAAOK,GACrCiB,EAAkBtB,EAAMK,QAAO,SAAAb,GAAI,OAAuB,IAAnBA,EAAKZ,aAElD,OACE,6BAASM,UAAU,WACjB,4BAAQA,UAAU,UAChB,qCACA,kBAAC,EAAD,CAASJ,WAAYC,KAAKD,cAG5B,6BAASI,UAAU,QACjB,kBAAC,EAAD,CACEc,MAAOoB,EACP3B,aAAcV,KAAKwB,WACnBb,kBAAmBX,KAAKyB,gBACxBP,kBAAmBlB,KAAK0B,sBAI5B,4BAAQvB,UAAU,UAChB,0BAAMA,UAAU,cAAhB,cAEGoC,EAAgB9C,QAGnB,wBAAIU,UAAU,WACZ,4BACE,4BACED,KAAK,SACLC,UAAWS,IAAG,CAAE4B,SAAqB,QAAXlB,IAC1BP,QAASf,KAAK4B,YACdtC,MAAM,OAJR,QAUF,4BACE,4BACEY,KAAK,SACLC,UAAWS,IAAG,CAAE4B,SAAqB,WAAXlB,IAC1BP,QAASf,KAAK4B,YACdtC,MAAM,UAJR,WAUF,4BACE,4BACEY,KAAK,SACLC,UAAWS,IAAG,CAAE4B,SAAqB,cAAXlB,IAC1BP,QAASf,KAAK4B,YACdtC,MAAM,aAJR,eAWJ,4BACEY,KAAK,SACLC,UAAU,kBACVY,QAASf,KAAK2B,iBAHhB,yBAzIV,GAAyBrB,IAAMC,WCT/BkC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.7c43b887.chunk.js","sourcesContent":["import React from 'react';\nimport uuid from 'uuid/v4';\nimport PropTypes from 'prop-types';\n\nexport class TodoApp extends React.Component {\n  state = {\n    title: '',\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      title: event.target.value,\n    });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { title } = this.state;\n\n    if (title.length > 0) {\n      const newTask = {\n        title,\n        id: uuid(),\n        completed: false,\n      };\n\n      this.props.addNewTodo(newTask);\n\n      this.setState({\n        title: '',\n      });\n    }\n  }\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={title}\n          onChange={this.handleChange}\n        />\n      </form>\n    );\n  }\n}\n\nTodoApp.propTypes = {\n  addNewTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nexport const TodoItem = ({ todo, onDeleteTodo, onUpdateCompleted }) => {\n  const {\n    title,\n    id,\n    completed,\n  } = todo;\n\n  return (\n    <li className={cn({ completed })}>\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={id}\n          onChange={onUpdateCompleted}\n          checked={completed}\n        />\n        <label htmlFor={id}>{title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={onDeleteTodo}\n        />\n      </div>\n      <input type=\"text\" className=\"edit\" />\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  onDeleteTodo: PropTypes.func.isRequired,\n  onUpdateCompleted: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nexport const TodoList = (props) => {\n  const {\n    todos,\n    onDeleteTodo,\n    onUpdateCompleted,\n    onToggleCompleted,\n  } = props;\n\n  return (\n    <div>\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        onClick={onToggleCompleted}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n      {todos.length > 0 && (\n        <ul className=\"todo-list\">\n          {todos.map(todo => (\n            <TodoItem\n              key={todo.id}\n              todo={todo}\n              onDeleteTodo={() => onDeleteTodo(todo.id)}\n              onUpdateCompleted={() => onUpdateCompleted(todo.id)}\n            />\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n  onDeleteTodo: PropTypes.func.isRequired,\n  onUpdateCompleted: PropTypes.func.isRequired,\n  onToggleCompleted: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { TodoApp } from './components/TodoApp/TodoApp';\nimport { TodoList } from './components/TodoList/TodoList';\n\nconst handleFilters = (todos, filter) => {\n  switch (filter) {\n    case 'Active':\n      return todos.filter(todo => !todo.completed);\n    case 'Completed':\n      return todos.filter(todo => todo.completed);\n    default: return todos;\n  }\n};\n\nexport class App extends React.Component {\n  state = {\n    todos: [],\n    filter: 'All',\n  }\n\n  componentDidMount() {\n    const cachedTodos = localStorage.getItem('todos');\n\n    if (cachedTodos) {\n      const todos = JSON.parse(cachedTodos);\n\n      this.setState({ todos });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (JSON.stringify(prevState.todos) === JSON.stringify(this.state)) {\n      localStorage.setItem('todos', JSON.stringify(this.state.todos));\n    }\n  }\n\n  addNewTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [\n        ...prevState.todos,\n        todo,\n      ],\n    }));\n  }\n\n  deleteTodo = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== id),\n    }));\n  };\n\n  handleCompleted = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => (\n        (todo.id === id)\n          ? {\n            ...todo,\n            completed: !todo.completed,\n          }\n          : todo\n      )),\n    }));\n  };\n\n  toggleAllCompleted = (event) => {\n    const { checked } = event.target;\n\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => ({\n        ...todo,\n        completed: checked,\n      })),\n    }));\n  }\n\n  deleteCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  }\n\n  filterTodos = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      filter: value,\n    });\n  }\n\n  render() {\n    const { todos, filter } = this.state;\n    const filteredTodos = handleFilters(todos, filter);\n    const uncompletedTodo = todos.filter(todo => todo.completed === false);\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <TodoApp addNewTodo={this.addNewTodo} />\n        </header>\n\n        <section className=\"main\">\n          <TodoList\n            todos={filteredTodos}\n            onDeleteTodo={this.deleteTodo}\n            onUpdateCompleted={this.handleCompleted}\n            onToggleCompleted={this.toggleAllCompleted}\n          />\n        </section>\n\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            Items left:\n            {uncompletedTodo.length}\n          </span>\n\n          <ul className=\"filters\">\n            <li>\n              <button\n                type=\"button\"\n                className={cn({ selected: filter === 'All' })}\n                onClick={this.filterTodos}\n                value=\"All\"\n              >\n              All\n              </button>\n            </li>\n\n            <li>\n              <button\n                type=\"button\"\n                className={cn({ selected: filter === 'Active' })}\n                onClick={this.filterTodos}\n                value=\"Active\"\n              >\n              Active\n              </button>\n            </li>\n\n            <li>\n              <button\n                type=\"button\"\n                className={cn({ selected: filter === 'Completed' })}\n                onClick={this.filterTodos}\n                value=\"Completed\"\n              >\n                 Completed\n              </button>\n            </li>\n          </ul>\n\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={this.deleteCompleted}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}